#!/bin/sh
# --------------------------------------------------------------
#
# Script          : configure
#
# Description     : configures the ickstream player deamon
#
# Comments        : -
#
# Date            : 13.02.2013
#
# Updates         : 28.03.2013 added help option, be less verbose  //MAF
#
# Author          : //maf
#                  
# Remarks         : -
#
#
# Copyright (c) 2013 ickStream GmbH.
# All rights reserved.
# ------------------------------------------------------------------------

contact='sales@ickstream.com'
PCKNAME=ickpd
PWD=`pwd`

#echo Distribution: `git rev-list --all | head -1`

# ----------------------------------------
# Interpret arguments
while test $# -gt 0; do

  # build for debugging
  if test "$1" = "help"; then
    help=true

  # build for debugging
  elif test "$1" = "debug"; then
    debug=true

  # suppress alsa
  elif test "$1" = "noalsa"; then
    noalsa=true

  # suppress pulse audio
  elif test "$1" = "nopulse"; then
    nopulse=true

  # select hmi source
  elif echo "$1" | grep -q "^hmi="; then
    HMISRC=`echo "$1" | sed 's/^hmi=\(.*\)$/hmi\1\.c/g'`
    if [ ! -e "daemon/$HMISRC" ]; then
      echo "Source file $HMISRC not found!"
      exit 1;
    fi 

  # unknown option
  else
    echo "$0: unknown parameter \"$1\""
    echo
    help=true
  fi
  shift
done


# ----------------------------------------
if ${help:-false}; then
  echo "Usage: $0 [args ...]" 
  echo ""
  echo "Possible arguments:"
  echo "  help      - this help"
  echo "  debug     - build for debugging"
  echo "  hmi=X     - Use HMI X (one of Generic)"
  echo "  noalsa    - Don't use alsa audio backend"
  echo "  nopulse   - Don't use pulse audio backend"
  echo
  exit 1
fi


# ----------------------------------------
echo
echo -n 'Determine system type           : '
systype=`uname -s`
mchtype=`uname -m`
reltype=`uname -r`
mchname=`uname -n`

# generic parameters 
CC="cc"
CFLAGS="-Wall"
LDFLAGS="-rdynamic"
RANLIB="ranlib"
INCLUDES=""
EXTRALIBS=""
EXTRASRCS=""

case $systype-$reltype-$mchname in

  Linux-*)
    echo "this seems to be a Linux machine, fine."
    if ${debug:-false}; then
      CFLAGS="-g -pipe -Wall -DICK_DEBUG"
      LDFLAGS="-g -rdynamic"
    else
      CFLAGS="-pipe -Wall"
      LDFLAGS="-rdynamic"
    fi
    ;;

  *)
    echo "so far your system is neither known nor supported by the" 
    echo "ickstream team. We'll proceed with generic settings."
    echo "Feel free to add optimized settings for $systype-$reltype-$mchname"
    if ${debug:-false}; then
      CFLAGS="-g $CFLAGS -DICK_DEBUG"
      LDFLAGS="-g $LDFLAGS"
    fi
    ;;

esac


# ----------------------------------------
echo -n 'Check for makedepend            : '

MAKEDEPEND=true
IFS="${IFS=	 }"; saveIFS="$IFS"; IFS="${IFS}:"
for path in $PATH; do
  if test -r $path/makedepend; then
    MAKEDEPEND=makedepend
    break;
  fi
done
IFS="${saveIFS}"
if test $MAKEDEPEND = 'true'; then
  echo not found
else
  echo found
fi


# ----------------------------------------
echo -n 'Check for ickstream libraries   : '
for i in $ICK_ROOT $PWD/ickstream-p2p $PWD/../ickstream-p2p;
do
  if readlink -f /dev/null >/dev/null; then
    i=$(readlink -f "$i")
  fi
  if test -r $i/lib/libickstreamp2p.a\
       -a -r $i/include/ickDiscovery.h; then
    _ICK_ROOT=$i
    break;
  fi
done
if [ -z "$_ICK_ROOT" ]; then
  echo please define '$ICK_ROOT' in your environment
  echo "   ... or install the ickstream-p2p package in ./ickstream-p2p or ../ickstream-p2p"
  echo "   you'll need lib/libickstreamp2p.a and include/ickDiscovery.h in this directory"
  exit 1
else
  echo $_ICK_ROOT
fi
ICK_ROOT=$_ICK_ROOT


# ----------------------------------------
echo -n 'Check for cURL                  : '
if echo "#include <curl/curl.h>" | gcc -o /dev/null -E -x c - 2>/dev/null; then
  echo "found `curl-config --version`"
  #broken in curl-config:  CFLAGS="$CFLAGS `curl-config --cflags`"
  #don't need -L part:     EXTRALIBS="$EXTRALIBS `curl-config --libs`"
  EXTRALIBS="$EXTRALIBS -lcurl"
else
  echo "please install libcurl and retry..."
  exit 1
fi

# ----------------------------------------
echo -n 'Check for libUUID               : '
if echo "#include <uuid/uuid.h>" | gcc -o /dev/null -E -x c - 2>/dev/null; then
  echo "found"
  CFLAGS="$CFLAGS -DICK_UUID"
  EXTRALIBS="$EXTRALIBS -luuid"
else
  echo "please install libuuid and retry..."
  exit 1
fi

# ----------------------------------------
echo -n 'Check for alsa                  : '
if ${noalsa:-false}; then
  echo "ignored"
elif echo "#include <alsa/asoundlib.h>" | gcc -o /dev/null -E -x c - 2>/dev/null; then
  CFLAGS="$CFLAGS -DICK_ALSA"
  EXTRASRCS="$EXTRASRCS audioAlsa.c"
  EXTRALIBS="$EXTRALIBS -lasound"
  echo "found"
else
  echo "not found"
fi

# ----------------------------------------
echo -n 'Check for pulse audio           : '
if ${noaudio:-false}; then
  echo "ignored"
elif echo "#include <pulse/pulseaudio.h>" | gcc -o /dev/null -E -x c - 2>/dev/null; then
  CFLAGS="$CFLAGS -DICK_PULSEAUDIO"
  EXTRASRCS="$EXTRASRCS audioPulse.c"
  EXTRALIBS="$EXTRALIBS -lpulse"
  echo "found"
else
  echo "not found"
fi

# ----------------------------------------
echo -n 'Check for mpg123                : '
if echo "#include <mpg123.h>" | gcc -o /dev/null -E -x c - 2>/dev/null; then
  CFLAGS="$CFLAGS -DICK_MPG123"
  EXTRASRCS="$EXTRASRCS codecMpg123.c"
  EXTRALIBS="$EXTRALIBS -lmpg123"
  echo "found"
else
  echo "not found"
fi

# ----------------------------------------
echo -n 'using HMI module                : '
if [ -z "$HMISRC" ]; then
  echo "None"
  CFLAGS="$CFLAGS -DICK_NOHMI"
else
  echo $HMISRC
  EXTRASRCS="$EXTRASRCS $HMISRC"
fi


# ----------------------------------------
INCLUDES="$INCLUDES $ICK_ROOT/include"
echo 'Used include directories        :' $INCLUDES
for path in $INCLUDES
do
  CINCL="$CINCL -I$path"
done

CONFIG_INFO="# DO NOT EDIT (generated on `date` by $PWD/configure)"

# ----------------------------------------
echo -n 'Debugging                       : ' 
if ${debug:-false}; then
  echo "enabled"
else
  echo "disabled"
fi
echo 'Used compiler flags             :' $CFLAGS
echo 'Used linker flags               :' $LDFLAGS
echo 'Used extra sources              :' $EXTRASRCS
echo 'Used extra libs                 :' $EXTRALIBS


# ----------------------------------------
# Process templates
#echo
mkdir -p scripts
cat > scripts/config.status << eof
#!/bin/sh
dest=\`basename \$1 .in\`
if test -r \$dest; then
  mv -f \$dest \$dest.bak
fi
#echo Creating \$dest from \$1
sed -e 's,@cinfo@,$CONFIG_INFO,g' \\
    -e 's,@icklibroot@,$ICK_ROOT,g' \\
    -e 's,@pkgname@,$PKGNAME,g' \\
    -e 's,@ickpdroot@,$PWD,g' \\
    -e 's,@includes@,$CINCL,g' \\
    -e 's,@ranlib@,$RANLIB,g' \\
    -e 's,@cc@,$CC,g' \\
    -e 's,@extralibs@,$EXTRALIBS,g' \\
    -e 's,@extrasrcs@,$EXTRASRCS,g' \\
    -e 's,@cflags@,$CFLAGS,g' \\
    -e 's,@makedepend@,$MAKEDEPEND,g' \\
    -e 's,@ldflags@,$LDFLAGS,g' \\
	< \$1 > \$dest
if [ -x \$1 ]; then
  chmod +x \$dest
fi
eof
chmod +x scripts/config.status

# ----------------------------------------
# echo 'Running config.status : '
ROOTDIR=$PWD
for a in *.in `find daemon -name '*.in' -print`; do
#  echo -n "./`dirname $a` : "
  cd `dirname $a`
  $ROOTDIR/scripts/config.status `basename $a`
  cd $ROOTDIR
done

# ----------------------------------------
echo
echo "Makefiles are configured for your system environment now. Type"
echo "  make"
echo "to build the library and executables"
echo
echo "Have fun!  <c>2013 //MAF, ickstream GmbH"
echo


# ======================== END OF SCRIPT ======================
